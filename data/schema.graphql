schema {
  query: Root
  mutation: Mutation
}

input AddSiteInput {
  name: String!
  destinations: String
  url: String!
  SMTPLogin: String
  SMTPPassword: String
  clientMutationId: String
}

type AddSitePayload {
  siteEdge: SiteEdge
  viewer: Viewer
  clientMutationId: String
}

type Mutation {
  addSite(input: AddSiteInput!): AddSitePayload
  removeSite(input: RemoveSiteInput!): RemoveSitePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input RemoveSiteInput {
  id: ID!
  clientMutationId: String
}

type RemoveSitePayload {
  deletedId: ID
  viewer: Viewer
  clientMutationId: String
}

type Root {
  viewer(
    # pass jwt if exists
    jwt: String
  ): Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# A site object
type Site implements Node {
  # The ID of an object
  id: ID!

  # id of site in db
  siteId: String

  # Site name
  name: String
  destinations: [String]
  owners: [String]
  url: String
  SMTPLogin: String
  JWT: String
}

# A connection to a list of items.
type SiteConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SiteEdge]
}

# An edge in a connection.
type SiteEdge {
  # The item at the end of the edge
  node: Site

  # A cursor for use in pagination
  cursor: String!
}

type Viewer implements Node {
  # The ID of an object
  id: ID!

  # User login (if presented)
  login: String
  sites(after: String, first: Int, before: String, last: Int): SiteConnection
}
